{"ast":null,"code":"var _jsxFileName = \"/Users/erinwu/Downloads/project_kaleidoscope/src/Components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  size = 500,\n  brushColor = '#000000',\n  brushSize = 5\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.style.backgroundColor = 'pink'; // Set the canvas background to pink\n    const context = canvas.getContext('2d');\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    let drawing = false;\n    let lastX = 0;\n    let lastY = 0;\n    const startDrawing = e => {\n      const rect = canvas.getBoundingClientRect();\n      lastX = e.clientX - rect.left;\n      lastY = e.clientY - rect.top;\n      drawing = true;\n    };\n    const draw = e => {\n      if (!drawing) return;\n      const rect = canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      const hue = x / canvas.width * 360;\n      const strokeColor = `hsl(${hue}, 100%, 50%)`;\n      context.lineWidth = brushSize;\n      context.strokeStyle = strokeColor;\n      context.lineCap = 'round';\n\n      // Calculate initial and final points for the drawing\n      const initialPoints = calculateSymmetricalPoints(lastX, lastY, centerX, centerY, brushSize, brushColor, context);\n      const finalPoints = calculateSymmetricalPoints(x, y, centerX, centerY, brushSize, brushColor, context);\n      initialPoints.forEach((start, index) => {\n        const end = finalPoints[index];\n        context.beginPath();\n        context.moveTo(start.x, start.y);\n        context.lineTo(end.x, end.y);\n        context.stroke();\n      });\n      lastX = x;\n      lastY = y;\n    };\n    const stopDrawing = () => {\n      drawing = false;\n    };\n    canvas.addEventListener('mousedown', startDrawing);\n    canvas.addEventListener('mousemove', draw);\n    canvas.addEventListener('mouseup', stopDrawing);\n    canvas.addEventListener('mouseout', stopDrawing);\n    return () => {\n      canvas.removeEventListener('mousedown', startDrawing);\n      canvas.removeEventListener('mousemove', draw);\n      canvas.removeEventListener('mouseup', stopDrawing);\n      canvas.removeEventListener('mouseout', stopDrawing);\n    };\n  }, [brushColor, brushSize]); // Add brushColor and brushSize as dependencies\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: size,\n    height: size\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n};\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Canvas;\nexport default Canvas;\n\n// Adjusted calculateSymmetricalPoints to take additional arguments\nfunction calculateSymmetricalPoints(x, y, centerX, centerY, brushSize, brushColor, context) {\n  const points = [];\n  const angle = Math.atan2(y - centerY, x - centerX);\n  const dist = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);\n  for (let i = 0; i < 8; i++) {\n    const sectionAngle = Math.PI / 4 * i;\n    const reflectedAngle = 2 * sectionAngle - angle;\n    points.push({\n      x: centerX + dist * Math.cos(angle + sectionAngle),\n      y: centerY + dist * Math.sin(angle + sectionAngle)\n    });\n    points.push({\n      x: centerX + dist * Math.cos(reflectedAngle + sectionAngle),\n      y: centerY + dist * Math.sin(reflectedAngle + sectionAngle)\n    });\n  }\n  return points;\n}\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Canvas","size","brushColor","brushSize","_s","canvasRef","canvas","current","style","backgroundColor","context","getContext","centerX","width","centerY","height","drawing","lastX","lastY","startDrawing","e","rect","getBoundingClientRect","clientX","left","clientY","top","draw","x","y","hue","strokeColor","lineWidth","strokeStyle","lineCap","initialPoints","calculateSymmetricalPoints","finalPoints","forEach","start","index","end","beginPath","moveTo","lineTo","stroke","stopDrawing","addEventListener","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","points","angle","Math","atan2","dist","sqrt","i","sectionAngle","PI","reflectedAngle","push","cos","sin","$RefreshReg$"],"sources":["/Users/erinwu/Downloads/project_kaleidoscope/src/Components/Canvas.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst Canvas = ({ size = 500, brushColor = '#000000', brushSize = 5 }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.style.backgroundColor = 'pink'; // Set the canvas background to pink\n    const context = canvas.getContext('2d');\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    let drawing = false;\n    let lastX = 0;\n    let lastY = 0;\n\n    const startDrawing = (e) => {\n      const rect = canvas.getBoundingClientRect();\n      lastX = e.clientX - rect.left;\n      lastY = e.clientY - rect.top;\n      drawing = true;\n    };\n\n    const draw = (e) => {\n      if (!drawing) return;\n      const rect = canvas.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      const hue = (x / canvas.width) * 360;\n      const strokeColor = `hsl(${hue}, 100%, 50%)`;\n\n      context.lineWidth = brushSize;\n      context.strokeStyle = strokeColor;\n      context.lineCap = 'round';\n\n\n      // Calculate initial and final points for the drawing\n      const initialPoints = calculateSymmetricalPoints(lastX, lastY, centerX, centerY, brushSize, brushColor, context);\n      const finalPoints = calculateSymmetricalPoints(x, y, centerX, centerY, brushSize, brushColor, context);\n\n      initialPoints.forEach((start, index) => {\n        const end = finalPoints[index];\n        context.beginPath();\n        context.moveTo(start.x, start.y);\n        context.lineTo(end.x, end.y);\n        context.stroke();\n      });\n\n      lastX = x;\n      lastY = y;\n    };\n\n    const stopDrawing = () => {\n      drawing = false;\n    };\n\n    canvas.addEventListener('mousedown', startDrawing);\n    canvas.addEventListener('mousemove', draw);\n    canvas.addEventListener('mouseup', stopDrawing);\n    canvas.addEventListener('mouseout', stopDrawing);\n\n    return () => {\n      canvas.removeEventListener('mousedown', startDrawing);\n      canvas.removeEventListener('mousemove', draw);\n      canvas.removeEventListener('mouseup', stopDrawing);\n      canvas.removeEventListener('mouseout', stopDrawing);\n    };\n  }, [brushColor, brushSize]); // Add brushColor and brushSize as dependencies\n\n  return <canvas ref={canvasRef} width={size} height={size} />;\n};\n\nexport default Canvas;\n\n// Adjusted calculateSymmetricalPoints to take additional arguments\nfunction calculateSymmetricalPoints(x, y, centerX, centerY, brushSize, brushColor, context) {\n  const points = [];\n  const angle = Math.atan2(y - centerY, x - centerX);\n  const dist = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);\n\n  for (let i = 0; i < 8; i++) {\n    const sectionAngle = (Math.PI / 4) * i;\n    const reflectedAngle = 2 * sectionAngle - angle;\n    points.push({\n      x: centerX + dist * Math.cos(angle + sectionAngle),\n      y: centerY + dist * Math.sin(angle + sectionAngle)\n    });\n    points.push({\n      x: centerX + dist * Math.cos(reflectedAngle + sectionAngle),\n      y: centerY + dist * Math.sin(reflectedAngle + sectionAngle)\n    });\n  }\n\n  return points;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}